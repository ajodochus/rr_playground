///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Reflection;

using XmlDiffLib;
using Org.XmlUnit.Builder;
using Org.XmlUnit.Diff;

namespace playground.compare_xml
{

    public partial class compare_xml
    {  
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
             string org_directory = System.IO.Directory.GetCurrentDirectory();
             string source_xml = Path.Combine(org_directory, @"compare_xml\_source.xml");
             string compare_xml = Path.Combine(org_directory, @"compare_xml\_compare.xml");
             
             XmlDocument source_xml_parsed =  new XmlDocument();
             source_xml_parsed.Load(source_xml);
             
             XmlDocument compare_xml_parsed =  new XmlDocument();
             compare_xml_parsed.Load(compare_xml);
             
             var exclude_attributes = new List<string> { "", "", "some attributes to exclude from diff" };
             var exclude_nodes= new List<string> { "Component", "", "some nodes to exlude from diff" };
             
            var myDiff = DiffBuilder.Compare(Input.FromString(source_xml_parsed.InnerXml))
					.WithTest(Input.FromString(compare_xml_parsed.InnerXml))
					.WithNodeFilter(x => !exclude_nodes.Contains(x.Name))
					.WithAttributeFilter(x => !exclude_attributes.Contains(x.Name))
					.Build();
            
            var sb = new StringBuilder();
            foreach(var dif in myDiff.Differences){    	
            	sb.AppendLine(dif.Comparison.ToString());   	
            }
			if (myDiff.HasDifferences()) {
				Ranorex.Report.Info("xml differs: " + sb.ToString());
			}
				
        }

    }
}

///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace playground.get_table_content
{
    public partial class DDT
    {
    	
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }
        
        private static void tbl_handler(RepoItemInfo ItemInfo){
        	Dictionary<string,string> dict_table = new Dictionary<string, string>();
        	string name = "";
        	string number = "";
        	
        	Ranorex.Unknown varTableIdentifier  = ItemInfo.CreateAdapter<Ranorex.Unknown>(true);			        
	        int rows = varTableIdentifier.Find("./Row").Count;
	        for (int i = 1; i <= rows; i++) {
	        	name = varTableIdentifier.FindSingle("./Row["+i+"]/Cell[2]").GetAttributeValueText("Text");
	        	number = varTableIdentifier.FindSingle("./Row["+i+"]/Cell[3]").GetAttributeValueText("Text");
	        	dict_table.Add(name,number);
	        }
	        
	        foreach(KeyValuePair<string,string> kv in dict_table){
	        	Ranorex.Report.Info(kv.Key +" - "+ kv.Value);
	        }
	        
		}

    }
}
